#include <iostream>
#include <vector>
#include <string>
using namespace std;

void read_input(vector<string> &ar, vector<int> &inp, int &row, int &column)
{
    cin >> row >> column;
    for (int i = 0; i < row; ++i)
    {
        string a;
        cin >> a;
        ar.push_back(a);
    }

    for (int i = 0; i < row; i++)
    {
        int b;
        cin >> b;
        inp.push_back(b);
    }
}

bool is_valid_network(vector<string> const ar, int const row, int const column)
{
    for (int i = 0; i < column; i++)
    {
        for (int j = 0; j < row; j++)
        {
            if (ar[i][j] != '-')
            {
                if (ar[i][j] < 'a' || ar[i][j] > 'z')
                {
                    return false;
                }
                int counter = 1;
                for (int k = 0; k < row; k++)
                {
                    if (j != k)
                    {
                        if (ar[j][i] == ar[k][i])
                        {
                            counter++;
                        }
                    }
                }
                if (counter != 2)
                {
                    return false;
                }
            }
        }
    }
    for (int i = 0; i < row; i++)
    {
        if (ar[i].length() != column)
        {
            return false;
        }
    }

    return true;
}

void process(vector<string> &ar, vector<int> &inp, int const row, int const column)
{
    for (int j = 0; j < column; j++)
        for (int i = 0; i < row - 1; i++)
        {
            if (ar[i][j] != '-')
            {
                if (is_valid_network(ar, row, column))
                {
                    for (int k = i + 1; k < row; k++)
                    {
                        if (ar[i][j] == ar[k][j])
                        {
                            if (inp[i] > inp[k])
                            {
                                char temp = inp[i];
                                inp[i] = inp[k];
                                inp[k] = temp;
                            }
                        }
                    }
                }
                else
                {
                    cout << "Invalid Network\n";
                }
            }
        }
}

void generate_output(vector<string> const ar, vector<int> const inp, int const row, int const column)
{
    if (is_valid_network(ar, row, column))
    {
        bool flag = false;
        for (int i = 0; i < row - 1; i++)
            if (inp[i] > inp[i + 1])
            {
                cout << "Not sorted\n";
                flag = true;
            }
        if (!flag)
            cout << "Sorted\n";
    }
}

int main()
{
    int row, column;

    vector<string> ar;
    
    vector<int> inp;
    
    read_input(ar, inp, row, column);
    
    process(ar, inp, row, column);
    
    generate_output(ar, inp, row, column);
    
    system("pause");
    return 0;
}
